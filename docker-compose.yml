# ==========================================
# Docker Compose Configuration
# FoodieExpress V4.0 - Complete Stack
# ==========================================
# 
# Services:
# - redis: Distributed session store (Redis 7 Alpine)
# - backend: FastAPI backend service (port 8000)
# - agent: Flask AI chatbot agent (port 5000)
#
# Network: All services communicate on 'foodie-network'
# 
# Usage:
#   Start all services: docker-compose up
#   Start in background: docker-compose up -d
#   Stop all services: docker-compose down
#   View logs: docker-compose logs -f
#   Rebuild: docker-compose up --build
# ==========================================

version: '3.8'

services:
  # ==================== REDIS SERVICE ====================
  redis:
    image: redis:7-alpine
    container_name: foodie-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - foodie-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==================== FASTAPI BACKEND ====================
  backend:
    build:
      context: ./food_api
      dockerfile: Dockerfile
    container_name: foodie-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # MongoDB Connection (from .env or direct)
      - MONGODB_URI=${MONGODB_URI:-mongodb+srv://user:pass@cluster.mongodb.net/foodie_db}
      
      # JWT Secret Key
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      
      # CORS Settings
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:5173,http://localhost:5174,http://localhost:3000,http://localhost:5000}
      
      # Redis Configuration (V3.0/V4.0)
      - REDIS_ENABLED=${REDIS_ENABLED:-true}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - foodie-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ==================== FLASK AI AGENT ====================
  agent:
    build:
      context: ./food_chatbot_agent
      dockerfile: Dockerfile
    container_name: foodie-agent
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      # Google Gemini AI API Key
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      
      # FastAPI Backend URL (use service name for inter-container communication)
      - FASTAPI_BASE_URL=http://backend:8000
      
      # Redis Configuration (V3.0/V4.0)
      - REDIS_ENABLED=${REDIS_ENABLED:-true}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - SESSION_TTL=${SESSION_TTL:-3600}
      - PENDING_ORDER_TTL=${PENDING_ORDER_TTL:-600}
      
      # Flask Configuration
      - FLASK_ENV=${FLASK_ENV:-production}
      - FLASK_PORT=5000
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - foodie-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

# ==================== NETWORKS ====================
networks:
  foodie-network:
    driver: bridge
    name: foodie-network

# ==================== VOLUMES ====================
volumes:
  redis-data:
    driver: local
    name: foodie-redis-data
